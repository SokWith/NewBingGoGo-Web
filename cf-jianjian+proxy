let joinStats = true;  //可选加入统计。 加入统计不会收集任何隐私信息，仅统计访问量。
let webPath = 'https://raw.githubusercontent.com/jianjianai/NewBingGoGo-Web/master/src/main/resources'; //web页面地址，可以修改成自己的仓库来自定义前端页面
//  let webPath = 'https://www.bing.com';
let serverConfig = {
    "h1": "NewBingGoGo",
    "h2": "简单开始和NewBing聊天",
    "p":"",
    "firstMessages":[
        "好的，我已清理好板子，可以重新开始了。我可以帮助你探索什么?",
        "明白了，我已经抹去了过去，专注于现在。我们现在应该探索什么?",
        "重新开始总是很棒。问我任何问题!",
        "好了，我已经为新的对话重置了我的大脑。你现在想聊些什么?",
        "很好，让我们来更改主题。你在想什么?",
        "谢谢你帮我理清头绪! 我现在能帮你做什么?",
        "没问题，很高兴你喜欢上一次对话。让我们转到一个新主题。你想要了解有关哪些内容的详细信息?",
        "谢谢你! 知道你什么时候准备好继续前进总是很有帮助的。我现在能为你回答什么问题?",
        "当然，我已准备好进行新的挑战。我现在可以为你做什么?"
    ],
    "firstProposes":[
        "教我一个新单词",
        "我需要有关家庭作业的帮助",
        "我想学习一项新技能",
        "最深的海洋是哪个?",
        "一年有多少小时?",
        "宇宙是如何开始的?",
        "寻找非虚构作品",
        "火烈鸟为何为粉色?",
        "有什么新闻?",
        "让我大笑",
        "给我看鼓舞人心的名言",
        "世界上最小的哺乳动物是什么?",
        "向我显示食谱",
        "最深的海洋是哪个?",
        "为什么人类需要睡眠?",
        "教我有关登月的信息",
        "我想学习一项新技能",
        "如何创建预算?",
        "给我说个笑话",
        "全息影像的工作原理是什么?",
        "如何设定可实现的目标?",
        "金字塔是如何建成的?",
        "激励我!",
        "宇宙是如何开始的?",
        "如何制作蛋糕?"
    ]
}

let cookies = [
  "KievRPSSecAuth=;-U="
]

let serverConfigString = JSON.stringify(serverConfig);
// 同查找 _U 一样, 查找 KievRPSSecAuth 的值并替换下方的xxx
const KievRPSSecAuth = '';
const SYDNEY_ORIGIN = 'https://sydney.bing.com';
const KEEP_REQ_HEADERS = [
  'accept',
  'accept-encoding',
  'accept-language',
  'connection',
  'cookie',
  'upgrade',
  'user-agent',
  'sec-websocket-extensions',
  'sec-websocket-key',
  'sec-websocket-version',
  'x-request-id',
  'content-length',
  'content-type',
  'access-control-request-headers',
  'access-control-request-method',
];
const IP_RANGE = [
  ['3.2.50.0', '3.5.31.255'], //192,000
  ['3.12.0.0', '3.23.255.255'], //786,432
  ['3.30.0.0', '3.33.34.255'], //205,568
  ['3.40.0.0', '3.63.255.255'], //1,572,864
  ['3.80.0.0', '3.95.255.255'], //1,048,576
  ['3.100.0.0', '3.103.255.255'], //262,144
  ['3.116.0.0', '3.119.255.255'], //262,144
  ['3.128.0.0', '3.247.255.255'], //7,864,320
];

/**
 * 随机整数 [min,max)
 * @param {number} min
 * @param {number} max
 * @returns
 */
const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min)) + min;

/**
 * ip 转 int
 * @param {string} ip
 * @returns
 */
const ipToInt = (ip) => {
  const ipArr = ip.split('.');
  let result = 0;
  result += +ipArr[0] << 24;
  result += +ipArr[1] << 16;
  result += +ipArr[2] << 8;
  result += +ipArr[3];
  return result;
};




/**
 * int 转 ip
 * @param {number} intIP
 * @returns
 */
const intToIp = (intIP) => {
  return `${(intIP >> 24) & 255}.${(intIP >> 16) & 255}.${(intIP >> 8) & 255}.${intIP & 255}`;
};

const getRandomIP = () => {
  const randIndex = getRandomInt(0, IP_RANGE.length);
  const startIp = IP_RANGE[randIndex][0];
  const endIp = IP_RANGE[randIndex][1];
  const startIPInt = ipToInt(startIp);
  const endIPInt = ipToInt(endIp);
  const randomInt = getRandomInt(startIPInt, endIPInt);
  const randomIP = intToIp(randomInt);
  return randomIP;
};

/**
 * home
 * @param {string} pathname
 * @returns
 */
const home = async (pathname) => {
 // const baseUrl = 'https://raw.githubusercontent.com/adams549659584/go-proxy-bingai/master/';
 const baseUrl = 'https://raw.githubusercontent.com/jianjianai/NewBingGoGo-Web/master/src/main/resources/'; 
 let url;

  // if (pathname.startsWith('/github/')) {
  if (pathname.indexOf('/web/') === 0) {
    url = pathname.replace('/web/', baseUrl);
  } else {
    url = baseUrl + 'web/NewBingGoGo.html';
  // return getRedirect('/web/NewBingGoGo.html');
   return await goWeb(url);
  }
  const res = await fetch(url);
  const newRes = new Response(res.body, res);
  if (pathname === '/') {
    newRes.headers.delete('content-security-policy');
    newRes.headers.set('content-type', 'text/html; charset=utf-8');
  }
  return newRes;
};

export default {
  /**
   * fetch
   * @param {Request} request
   * @param {*} env
   * @param {*} ctx
   * @returns
  
   */
  async fetch(request, env, ctx) {
    const currentUrl = new URL(request.url);

    //请求服务器配置  
    let urlN = new URL(request.url);
    let path = urlN.pathname;
 
   if(path==='/web/resource/config.json'){
    return new Response(serverConfigString,{
        status: 200,
        statusText: 'ok',
        headers: {
            "content-type": "application/x-javascript; charset=utf-8",
            "cache-control":"max-age=14400"
        }
    })
}
if (path.startsWith("/web/")||path === "/favicon.ico") { //web请求
    if(!joinStats){
        if(path==="/web/js/other/stats.js"){
            return new Response("console.log(\"未加入统计\");",{
                status: 200,
                statusText: 'ok',
                headers: {
                    "content-type": "application/x-javascript; charset=utf-8",
                    "cache-control":"max-age=14400"
                }
            })
        }
    }
    let a = `${webPath}${path}`;
    return await goWeb(a);
  }

  if (path === "/turing/conversation/create") { //创建聊天
    return goUrl(request, "https://www.bing.com/turing/conversation/create",{
        "referer":"https://www.bing.com/search?q=Bing+AI"
    });
}

   // if (currentUrl.pathname === '/' || currentUrl.pathname.startsWith('/web/')) {
//   if (currentUrl.pathname !== '/' || currentUrl.pathname.indexOf('/web/') !== 0) {
  if (currentUrl.pathname !== '/' && currentUrl.pathname.indexOf('/web') === -1) { 
    const targetUrl = new URL(SYDNEY_ORIGIN + currentUrl.pathname + currentUrl.search);

    const newHeaders = new Headers();
    request.headers.forEach((value, key) => {
      // console.log(`old : ${key} : ${value}`);
      if (KEEP_REQ_HEADERS.includes(key)) {
        newHeaders.set(key, value);
      }
    });
    newHeaders.set('host', targetUrl.host);
    newHeaders.set('origin', targetUrl.origin);
    newHeaders.set('referer', 'https://www.bing.com/search?q=Bing+AI');
    const randIP = getRandomIP();
    // console.log('randIP : ', randIP);
    newHeaders.set('X-Forwarded-For', randIP);
    newHeaders.set('Cookie', 'KievRPSSecAuth='+KievRPSSecAuth+';');
    const oldUA = request.headers.get('user-agent');
    const isMobile = oldUA.includes('Mobile') || oldUA.includes('Android');
    if (isMobile) {
      newHeaders.set(
        'user-agent',
        'Mozilla/5.0 (iPhone; CPU iPhone OS 15_7 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.7 Mobile/15E148 Safari/605.1.15 BingSapphire/1.0.410427012'
      );
    } else {
      newHeaders.set('user-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36 Edg/113.0.1774.35');
    }

    // newHeaders.forEach((value, key) => console.log(`${key} : ${value}`));
    const newReq = new Request(targetUrl, {
      method: request.method,
      headers: newHeaders,
      body: request.body,
    });
    // console.log('request url : ', newReq.url);
    const res = await fetch(newReq);
    return res;
  }
else{
 // return getRedirect('/search?q=Bing+AI');
  return getRedirect('/web/NewBingGoGo.html');
 // return home(currentUrl.pathname)
    }
  } 
};

async function goWeb(path) {
  let res = await fetch(path);
  let mimeType;
  if (path.endsWith(".html")) {
      mimeType = "text/html; charset=utf-8";
  } else if (path.endsWith(".js")) {
      mimeType = "application/x-javascript; charset=utf-8";
  } else if (path.endsWith(".css")) {
      mimeType = "text/css; charset=utf-8";
  } else if (path.endsWith(".png")) {
      mimeType = "image/png";
  } else if (path.endsWith(".ico")) {
      mimeType = "image/png";
  }
  return new Response(res.body, {
      status: 200,
      statusText: 'ok',
      headers: {
          "content-type": mimeType,
          "cache-control":"max-age=14400"
      }
  });
}


//返回重定向
function getRedirect(url) {
  return new Response("正在重定向到" + url, {
      status: 302,
      statusText: 'redirect',
      headers: {
          "content-type": "text/html",
          "location": url
      }
  })
}

//请求某地址
async function goUrl(request, url, addHeaders) {
  //构建 fetch 参数
  let fp = {
      method: request.method,
      headers: {}
  }
  //保留头部信息
  let reqHeaders = request.headers;
  let dropHeaders = ["accept", "accept-language","accept-encoding"];
  for (let h of dropHeaders) {
      if (reqHeaders.has(h)) {
          fp.headers[h] = reqHeaders.get(h);
      }
  }


  fp.headers["user-agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36 Edg/113.0.1774.57"

  //客户端指定的随机地址
  let randomAddress = reqHeaders.get("randomAddress");
  if(!randomAddress){
      randomAddress = "12.24.144.227";
  }
  //添加X-forwarded-for
  fp.headers['x-forwarded-for'] = randomAddress;

  if (addHeaders) {
      //添加头部信息
      for (let h in addHeaders) {
          fp.headers[h] = addHeaders[h];
      }
  }


  let cookieID = 0;
  if(reqHeaders.get('NewBingGoGoWeb')){//如果是web版
      //添加配置的随机cookie
      if (cookies.length === 0) {
          return getReturnError("没有任何可用cookie，请前在第一行代码cookies变量中添加cookie");
      }
      cookieID = Math.floor(Math.random() * cookies.length);
      let userCookieID = reqHeaders.get("cookieID");
      if (userCookieID) {
          if (userCookieID >= 0 && userCookieID <= cookies.length-1) {
              cookieID = userCookieID;
          } else {
              return getReturnError("cookieID不存在，请刷新页面测试！");
          }
      }
      fp.headers["cookie"] = cookies[cookieID];
  }else {//如果是插件版
      fp.headers["cookie"] = reqHeaders.get('cookie');
  }

  let res = await fetch(url, fp);
  let newRes = new Response(res.body,res);
  newRes.headers.set("cookieID",`${cookieID}`);
  return newRes;
}

//获取用于返回的错误信息
function getReturnError(error) {
  return new Response(JSON.stringify({
      value: 'error',
      message: error
  }), {
      status: 200,
      statusText: 'ok',
      headers: {
          "content-type": "application/json",
          "NewBingGoGoError":'true'
      }
  })
}
